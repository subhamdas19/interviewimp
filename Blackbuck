Find the element in array before which all elements are smaller and after which all elements are greater
given a BST,find the element with maximum count
Different types of MAPs on java



SOLUTIONS

https://www.geeksforgeeks.org/find-the-element-before-which-all-the-elements-are-smaller-than-it-and-after-which-all-are-greater-than-it/
JAVA
// Java program to find the element which is greater than
// all left elements and smaller than all right elements.
import java.io.*;
import java.util.*;

public class GFG {
	static int findElement(int[] arr, int n)
	{
			// leftMax[i] stores maximum of arr[0..i-1]
			int[] leftMax = new int[n];
			leftMax[0] = Integer.MIN_VALUE;

			// Fill leftMax[]1..n-1]
			for (int i = 1; i < n; i++)
				leftMax[i] = Math.max(leftMax[i - 1], arr[i - 1]);
					
			// Initialize minimum from right
			int rightMin = Integer.MAX_VALUE;

			// Traverse array from right
			for (int i = n - 1; i >= 0; i--)
			{
				// Check if we found a required element
				if (leftMax[i] < arr[i] && rightMin > arr[i])
					return i;

				// Update right minimum
				rightMin = Math.min(rightMin, arr[i]);
			}
				
			// If there was no element matching criteria
			return -1;

			
	}

	// Driver code
	public static void main(String args[])
	{
			int[] arr = {5, 1, 4, 3, 6, 8, 10, 7, 9};
			int n = arr.length;
			System.out.println("Index of the element is " +
			findElement(arr, n));
	}

	// This code is contributed
	// by rachana soma
}

https://www.geeksforgeeks.org/find-maximum-count-of-duplicate-nodes-in-a-binary-search-tree/
/* Java program to find the median of BST
in O(n) time and O(1) space*/
class GFG
{
	
/* A binary search tree Node has data, pointer
to left child and a pointer to right child */
static class Node
{
	int val;
	Node left, right;
};

static Node newNode(int data)
{
	Node temp = new Node();
	temp.val = data;
	temp.left = temp.right = null;
	return temp;
}

// cur for storing the current count
// of the value and mx for the maximum count
// of the element which is denoted by node
static int cur = 1, mx = 0;
static int node;
static Node previous = null;

// Find the inorder traversal of the BST
static void inorder(Node root)
{
	// If root is null then return
	if (root == null)
	{
		return;
	}
	inorder(root.left);
	if (previous != null)
	{
		
		// If the previous value is equal to
		// the current value then increase the count
		if (root.val == previous.val)
		{
			cur++;
		}
		
		// Else initialize the count by 1
		else
		{
			cur = 1;
		}
	}
	
	// If current count is greater than the
	// max count then update the mx value
	if (cur > mx)
	{
		mx = cur;
		node = root.val;
	}
	
	// Make the current Node as previous
	previous = root;
	inorder(root.right);
}

// Utility function
static int findnode(Node root)
{
	inorder(root);
	return node;
}

// Java Code
public static void main(String args[])
{
	/* Let us create following BST
				6
				/ \
				5	 7
			/ \ / \
			4	 5 7 7
	*/
	Node root = newNode(6);
	root.left = newNode(5);
	root.right = newNode(7);
	root.left.left = newNode(4);
	root.left.right = newNode(5);
	root.right.left = newNode(7);
	root.right.right = newNode(7);

	System.out.println("Node of BST is " +
						findnode(root));
}
}

// This code is contributed by Arnab Kundu



