https://www.geeksforgeeks.org/sort-an-array-of-0s-1s-and-2s/

https://leetcode.com/articles/maximmum-product-of-three-numbers/
public class Solution {
    public int maximumProduct(int[] nums) {
        int min1 = Integer.MAX_VALUE, min2 = Integer.MAX_VALUE;
        int max1 = Integer.MIN_VALUE, max2 = Integer.MIN_VALUE, max3 = Integer.MIN_VALUE;
        for (int n: nums) {
            if (n <= min1) {
                min2 = min1;
                min1 = n;
            } else if (n <= min2) {     // n lies between min1 and min2
                min2 = n;
            }
            if (n >= max1) {            // n is greater than max1, max2 and max3
                max3 = max2;
                max2 = max1;
                max1 = n;
            } else if (n >= max2) {     // n lies betweeen max1 and max2
                max3 = max2;
                max2 = n;
            } else if (n >= max3) {     // n lies betwen max2 and max3
                max3 = n;
            }
        }
        return Math.max(min1 * min2 * max1, max1 * max2 * max3);
    }
}
Time complexity : O(n)O(n). Only one iteration over the numsnums array of length nn is required.

Space complexity : O(1)O(1). Constant extra space is used.

https://www.geeksforgeeks.org/segregate-0s-and-1s-in-an-array-by-traversing-array-once/
https://www.geeksforgeeks.org/minimum-number-platforms-required-railwaybus-station/
https://www.geeksforgeeks.org/frequent-element-array/
