https://www.geeksforgeeks.org/sort-an-array-of-0s-1s-and-2s/

https://leetcode.com/articles/maximmum-product-of-three-numbers/
public class Solution {
    public int maximumProduct(int[] nums) {
        int min1 = Integer.MAX_VALUE, min2 = Integer.MAX_VALUE;
        int max1 = Integer.MIN_VALUE, max2 = Integer.MIN_VALUE, max3 = Integer.MIN_VALUE;
        for (int n: nums) {
            if (n <= min1) {
                min2 = min1;
                min1 = n;
            } else if (n <= min2) {     // n lies between min1 and min2
                min2 = n;
            }
            if (n >= max1) {            // n is greater than max1, max2 and max3
                max3 = max2;
                max2 = max1;
                max1 = n;
            } else if (n >= max2) {     // n lies betweeen max1 and max2
                max3 = max2;
                max2 = n;
            } else if (n >= max3) {     // n lies betwen max2 and max3
                max3 = n;
            }
        }
        return Math.max(min1 * min2 * max1, max1 * max2 * max3);
    }
}
Time complexity : O(n)O(n). Only one iteration over the numsnums array of length nn is required.

Space complexity : O(1)O(1). Constant extra space is used.

https://www.geeksforgeeks.org/segregate-0s-and-1s-in-an-array-by-traversing-array-once/
https://www.geeksforgeeks.org/minimum-number-platforms-required-railwaybus-station/
https://www.geeksforgeeks.org/frequent-element-array/
https://www.geeksforgeeks.org/move-zeroes-end-array/
https://www.geeksforgeeks.org/reverse-individual-words/
https://www.geeksforgeeks.org/pangram-checking/
https://www.geeksforgeeks.org/print-string-after-removing-all-10-or-01-from-the-binary-string/
https://www.geeksforgeeks.org/find-minimum-depth-of-a-binary-tree/
and return the node at minimum depth  https://www.geeksforgeeks.org/print-leaf-nodes-at-a-given-level/


 Remove All Adjacent Duplicates In String
Easy

735

60

Add to List

Share
Given a string S of lowercase letters, a duplicate removal consists of choosing two adjacent and equal letters, and removing them.

We repeatedly make duplicate removals on S until we no longer can.

Return the final string after all such duplicate removals have been made.  It is guaranteed the answer is unique.

 

Example 1:

Input: "abbaca"
Output: "ca"
Explanation: 
For example, in "abbaca" we could remove "bb" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is "aaca", of which only "aa" is possible, so the final string is "ca".

class Solution {
    public String removeDuplicates(String S) {
        Stack<Character> st=new Stack<>() ;
        for(int i=0;i<S.length();i++){
            char ch=S.charAt(i) ;
            if(st.size()==0||st.peek()!=ch){
                st.push(ch) ;
            }
            else st.pop() ;
        }
        String str="" ;
        while(st.size()>0){
            char ch=st.pop() ;
            str=ch +str;
        }
    
        return str ;
    }
}
Convert uppercase to lowercase and vice versa without using functions
public class Main {
    static String LowerToUpper(String s) {
        String result = "";
        char ch = ' ';
        for (int i = 0; i < s.length(); i++) {
            
            //check valid alphabet and it is in lowercase
            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {
                ch = (char)(s.charAt(i) - 32);
            }
            //else keep the same alphabet or any character
            else {
                ch = (char)(s.charAt(i));
            }
            
            result += ch; // concatenation, append c to result
        }
        return result;
    }
    
    and upper to lower is +32

